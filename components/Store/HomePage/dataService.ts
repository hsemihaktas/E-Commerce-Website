import { collection, getDocs, query, orderBy } from "firebase/firestore";
import { db } from "../../../firebaseConfig";
import { Product } from "./types";

export const loadAllProducts = async () => {
  try {
    console.log("üîç √úr√ºnler y√ºkleniyor...");

    // √ñnce t√ºm √ºr√ºnleri stok filtresi olmadan getir
    const allProductsQuery = query(
      collection(db, "products"),
      orderBy("createdAt", "desc")
    );

    const allProductsSnapshot = await getDocs(allProductsQuery);
    console.log("üì¶ Toplam √ºr√ºn sayƒ±sƒ±:", allProductsSnapshot.size);

    const allProducts: Product[] = [];

    allProductsSnapshot.forEach((doc) => {
      const data = doc.data();
      console.log("üì¶ √úr√ºn:", {
        id: doc.id,
        name: data.name,
        stock: data.stock,
        userId: data.userId,
      });
      allProducts.push({
        id: doc.id,
        ...data,
      } as Product);
    });

    console.log("‚úÖ Y√ºklenen √ºr√ºnler:", allProducts.length);

    // Sadece stokta olan √ºr√ºnleri filtrele (client-side)
    const stockedProducts = allProducts.filter(
      (product) => (product.stock || 0) > 0
    );
    console.log("üì¶ Stokta olan √ºr√ºnler:", stockedProducts.length);

    // Kullanƒ±cƒ± bilgilerini ekle (users collection'ƒ±nƒ± kontrol et)
    try {
      const usersQuery = query(collection(db, "users"));
      const usersSnapshot = await getDocs(usersQuery);
      console.log("üë• Users collection size:", usersSnapshot.size);

      const usersMap = new Map();
      usersSnapshot.forEach((doc) => {
        usersMap.set(doc.id, doc.data());
      });

      // √úr√ºnlere maƒüaza sahibi bilgilerini ekle
      const productsWithStore = stockedProducts.map((product) => ({
        ...product,
        storeOwner: usersMap.get(product.userId) || {
          email: "Maƒüaza Sahibi",
        },
      }));

      return productsWithStore;
    } catch (userError) {
      console.log("‚ö†Ô∏è Users collection bulunamadƒ±, √ºr√ºnleri yine de g√∂ster");
      // Users collection yoksa sadece √ºr√ºnleri g√∂ster
      const productsWithStore = stockedProducts.map((product) => ({
        ...product,
        storeOwner: { email: "Maƒüaza Sahibi" },
      }));

      return productsWithStore;
    }
  } catch (error) {
    console.error("‚ùå √úr√ºnler y√ºklenirken hata:", error);
    throw error;
  }
};
